/*
 * Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "th2_grpc_common/common.proto";

option java_multiple_files = true;
option java_package = "com.exactpro.th2.act.grpc";

service ActTyped {
  /* This action executes next steps:
      1) Registers checkpoint in Verifier microservice
      2) Sends passed message as is to Connectivity microservice
      3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
          from Connectivity microservice
      4) Returns the message repose and the Checkpoint */
  rpc placeOrderFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  /*Send fix message without response awaiting */
  rpc sendMessage (PlaceMessageRequestTyped) returns (SendMessageResponseTyped) {
  }

  rpc placeQuoteRequestFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeOrderMassCancelRequestFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteCancelFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteResponseFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }
}

message TradingParty {
  message TradingPartyValue {
    string MessageType = 1;
    string PartyID = 2;
    string PartyIDSource = 3;
    string PartyRole = 4;
  }

  repeated TradingPartyValue value = 1;
}

message NewOrderSingle {
  string SecurityID = 1;
  string SecurityIDSource = 2;
  string OrdType = 3;
  string AccountType = 4;
  string OrderCapacity = 5;
  string OrderQty = 6;
  string DisplayQty = 7;
  string Price = 8;
  string ClOrdID = 9;
  string SecondaryClOrdID = 10;
  string Side = 11;
  string TimeInForce = 12;
  string TransactTime = 13;
  TradingParty trading_party = 14;

  string SessionAlias = 15;
}

message SendMessageResponseTyped {
  RequestStatus status = 1;
  Checkpoint checkpoint_id = 2;
}

message PlaceMessageRequestTyped {
  NewOrderSingle new_order_single = 1;
  /* Please set connection_id into message. Act transfer this value into message
   * automatically if message hasn't connectivityID for backward compatibility */
  ConnectionID connection_id = 2[deprecated = true];
  EventID parent_event_id = 4;
  string description = 5;
}

message PlaceMessageResponseTyped {
  Message response_message = 1;
  RequestStatus status = 2;
  Checkpoint checkpoint_id = 3;
}
